##while True:
##    rval, frame =cam.read()
##    blurred = cv2.GaussianBlur(frame, (11,11),0)
##    # Make the mask
##    #hsv = cv2.cvtColor(blurred, cv2.COLOR_BGR2HSV)
##    mask = cv2.inRange(rgb, lower, upper)
##    mask = cv2.erode(mask, None, iterations=2)
##    mask = cv2.dilate(mask, None, iterations=2)
##    cv2.imshow("Keypoints2", mask)
##    cv2.waitKey(0)
## 



def trans(n1,n2):
    s1 = str(n1)
    s2 = str(n2)
    for i in range(0,3 - len(s1)):
        s1 = '0' + s1
    for i in range(0,3 - len(s2)):
        s2 = '0' + s2
    return s1 + s2



******ARDUINO******
void pointToDir(int dir) {
  while (true) {
    int opp = 0;
    int currDir = getOrient();
    int Speed = 100;
    if (currDir >= dir+2 || currDir <= dir-2){
      if (currDir > 180) {
        opp = currDir - 180;

        if (dir > currDir || dir < opp) {
          //turn right
          carTurnRight(Speed,Speed);
        } 
        else if (dir < currDir && dir > opp) {
          //turn right
          carTurnLeft(Speed,Speed);
        }
        else {
          carTurnRight(Speed,Speed);
          Serial.print("calc");
        }  
      } 
      else if (currDir < 180) {
        opp = currDir + 180;
        if (dir > currDir && dir < opp) {
          //turn right
          carTurnRight(Speed,Speed);
        } 
        else if (dir < currDir || dir > opp) {
          //turn right
          carTurnLeft(Speed,Speed);
        }
        else {
          carTurnRight(Speed,Speed);
        }
      } 
      else {
        opp = 0;
        if (dir > currDir) {
          //turn right
          carTurnRight(Speed,Speed);
        } 
        else if (dir < currDir) {
          //turn right
          carTurnLeft(Speed,Speed);
        }
        else {
          carTurnRight(Speed,Speed);
        }
      }
    }
    else {
      carStop();
      break;
    }
  }
}